#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable

#include "rng.glsl"
#include "utl.glsl"
#include "material.glsl"
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
// layout(binding = 1, set = 0, rgba16f) uniform image2D image;
layout(binding = 2, set = 0) uniform sampler2D uTextureCache[4096];
// layout(binding = 3, set = 0) uniform CameraProperties 
// {
// 	mat4 viewInverse;
// 	mat4 projInverse;
// } cam;

layout(std430, set = 0, binding = 5, scalar) buffer ProbeBuffer {
	LightProbe probes[];
};

layout(std430, set = 0, binding = 6, scalar) readonly buffer ProbeSettingsBuffer {
	LightProbeSettings probe_settings;
};

layout(location = 0) rayPayloadEXT RayData data;
layout(location = 2) rayPayloadEXT bool shadowed;

layout( push_constant ) uniform constants
{
    uint kFrame;
    uint kSuperSample;
};

#define SAMPLE_COUNT 2


vec3 light_probe_irradiance(vec3 p, vec3 n, LightProbeSettings settings) {
	// return light_probe_local_pos_normalized(settings, p);
    ivec3 min_index = light_probe_probe_index(settings, p);



	LightProbe neighbors[8];

    neighbors[0] = probes[index_3d(settings.dim, min_index)];
    neighbors[1] = probes[index_3d(settings.dim, min_index+ivec3(1,0,0))];
    neighbors[2] = probes[index_3d(settings.dim, min_index+ivec3(1,1,1))];
    neighbors[3] = probes[index_3d(settings.dim, min_index+ivec3(1,1,0))];
    neighbors[4] = probes[index_3d(settings.dim, min_index+ivec3(1,0,1))];
    neighbors[5] = probes[index_3d(settings.dim, min_index+ivec3(0,1,0))];
    neighbors[6] = probes[index_3d(settings.dim, min_index+ivec3(0,1,1))];
    neighbors[7] = probes[index_3d(settings.dim, min_index+ivec3(0,0,1))];
    // return abs(vec3(min_index))*0.2;
    // return abs(neighbors[0].p);
    return (light_probe_irradiance(p, n, neighbors, settings));


}


void main() 
{
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, kFrame);

    uint probe_id = gl_LaunchIDEXT.x;

    LightProbe probe = probes[probe_id];

    if (kSuperSample>0) {
        // for (int i = 0; i < 9; i++) {
        //     probes[probe_id].irradiance.irradiance[i] = vec3(0.0);
        // }
        probes[probe_id].irradiance = sh_identity();
        probes[probe_id].samples = 0;
    }
    if (probes[probe_id].samples > 320) {



        return;
    }

	vec4 origin = vec4(probe.p, 1.0);

	float tmin = 0.001;
	float tmax = 10000.0;

    vec3 image_color = vec3(0.0);

    float r0 = rnd(seed) * 2. - 1.;
    float r1 = rnd(seed) * 2. - 1.;
    float r2 = rnd(seed) * 2. - 1.;
    vec4 direction = vec4(normalize(vec3(r0,r1,r2)), 0);


    uint num_samples = 1;

    for (uint i = 0; i < num_samples; i++) {
        vec3 color=vec3(0.0);
        
        data.normal = direction.xyz;
        data.color = vec3(0.0);

        traceRayEXT(topLevelAS, 
            gl_RayFlagsNoneEXT, 
            // gl_RayFlagsOpaqueEXT, 
            0xff, 
            0, 
            0, 
            0, 
            origin.xyz, 
            tmin, 
            direction.xyz, 
            tmax, 
            0);


        vec3 h = origin.xyz + direction.xyz * data.distance;

        // direction.xyz = data.normal.xyz;
        direction.xyz *= -1.0f;

            
        if (data.distance < 0.0) {
            color += data.color;
            // color += vec3(0.9, 0.84, 0.84);
            // break;
        }
        else if (data.reflector >= 1.0) {
            color += light_probe_irradiance(h, -direction.xyz, probe_settings);
            color += data.color;// / pow(2, i);
            // vec3 h = origin.xyz + direction.xyz * data.distance;
            // direction.xyz = reflect(direction.xyz, data.normal);
            // direction.xyz = data.normal = normalize(direction.xyz + hemisphere_random(direction.xyz, seed) * 0.05);
        } else {
            color += light_probe_irradiance(h, -direction.xyz, probe_settings);
            color += data.color;
            // break;
        } 
        image_color += color;
        // stupid_radiance_encoding(probes[probe_id].irradiance, direction.xyz, color.rgb, probes[probe_id].samples);
    }



    SH9Irradiance irradiance_sample = irradiance_to_sh9(direction.xyz, image_color.rgb);
    // probes[probe_id].irradiance = accumulate_irradiance(probes[probe_id].irradiance, irradiance_sample, 1. / float(probes[probe_id].samples + 1));
    // probes[probe_id].irradiance = mix_irradiance(probes[probe_id].irradiance, irradiance_sample, float(probes[probe_id].samples));
    probes[probe_id].irradiance = accumulate_irradiance(probes[probe_id].irradiance, irradiance_sample, 1.);

    // probes[probe_id].irradiance = accumulate_irradiance(sh_identity(), probes[probe_id].irradiance, (4.*3.1415) / float(probes[probe_id].samples + 1));
    probes[probe_id].samples += 1;

    


    // irradiance_to_sh9(direction.xyz, image_color.rgb, probes[probe_id].irradiance);

    // probes[probe_id].irradiance = irradiance_sample;
    // probes[probe_id].irradiance.l00 = light_probe_aabb_size(probe_settings);
    // probes[probe_id].irradiance.l1m1 = light_probe_local_pos_normalized(probe_settings, origin.xyz);
}
