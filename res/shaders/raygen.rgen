#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform sampler2D uTextureCache[4096];
layout(binding = 3, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT RayData data;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

	float tmin = 0.001;
	float tmax = 10000.0;


    data.normal= direction.xyz;
    data.color = vec3(0.0);

    vec3 image_color = vec3(0.0);

    for (int i = 0; i < 3; i++) {

        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

        image_color += data.color / pow(2, i);
        if (data.distance < 0.0) {
            break;
        }
        else if (data.reflector >= 1.0) {
            vec4 h = origin + direction * data.distance;
            origin.xyz = h.xyz + data.normal * 0.001f;
            direction.xyz = reflect(direction.xyz, data.normal);
            data.normal = direction.xyz;
        } else {
            image_color += data.color;
            break;
        } 
    }

    // data.color.rg = inUV;

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(image_color, 0.0));
}