#version 460
#extension GL_ARB_separate_shader_objects  : enable
#extension GL_ARB_shading_language_420pack : enable

//#include "utl.glsl"
#include "material.glsl"
#include "raytrace.glsl"
#include "sky.glsl"

layout( push_constant ) uniform constants
{
	mat4		uInvV;
	vec4		uCamPos;
	uint 		uDrawCount;
	uint 		pad;
} PushConstants;

layout( std140, set = 0, binding = 0 ) uniform sporadicBuf
{
	int		uMode;
	int		uUseLighting;
	int		uNumInstances;
	float 	uTime;
} Sporadic;

struct ObjectData {
	mat4 model;

    vec4 bounds; // sphere

	uint material_id;
	uint padding[3 + 4*2];
};

layout(std430, set = 1, binding = 0) readonly buffer ObjectBuffer {
	ObjectData objects[];
} uObjectBuffer;

struct InstanceData {
	mat4 model;
};

layout(std430, set = 1, binding = 1) readonly buffer InstanceBuffer {
	InstanceData instances[];
} uInstanceData;

layout(std430, set = 1, binding = 2) readonly buffer IndirectBuffer {
	IndirectIndexedDraw draw[];
} uIndirectBuffer;

layout(std430, set = 2, binding = 0) readonly buffer MaterialBuffer {
	Material materials[];
} uMaterialBuffer;

layout(std430, set = 3, binding = 0) readonly buffer EnvironmentBuffer {
	Environment uEnvironment;
};

layout( set = 4, binding = 0 ) uniform sampler2D uSampler[4096];
layout(set = 5, binding = 0, rgba8) uniform writeonly image2D fOutput;

struct Vertex {
    vec3 p;
    float p0;
    vec3 n;
    float p1;
    vec3 c;
    float p2;
    vec2 t;
    float p3;
    float p4;
};

layout(set = 6, binding = 0) readonly buffer VertexData {
    Vertex vertices[];
};
layout(set = 7, binding = 0) readonly buffer IndexData {
    uint indices[];
};

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec3 blend_attrib(vec3 a, vec3 b, vec3 c, vec2 uv) {
    return a +  uv.x * (b-a) + uv.y * (c-a);
}
vec2 blend_attrib(vec2 a, vec2 b, vec2 c, vec2 uv) {
    return a +  uv.x * (b-a) + uv.y * (c-a);
}

vec3 trace_scene(in Ray ray_, inout RayHit best_hit, inout Ray bounce) {
    uint draw_count = PushConstants.uDrawCount;
    uint rng = 69;

    vec3 resultColor = vec3(0.0);    

    vec3 L = uEnvironment.sun.direction.xyz;
    resultColor.rgb = sky_color(ray_.direction, L);

    for (uint i = 0; i < draw_count; i++) {
        Ray ray = ray_;
        
        IndirectIndexedDraw draw = uIndirectBuffer.draw[i];

        // draw.index_count;
        // draw.first_index;
        // draw.vertex_offset;
        // draw.object_id;
        mat4 transform = uObjectBuffer.objects[draw.object_id].model;
        mat4 inv_t = inverse(transform);
        vec4 bounds = uObjectBuffer.objects[draw.object_id].bounds;
        uint albedo_id = draw.albedo_id;
        // bounds.xyz = (transform * vec4(bounds.xyz, 1.0)).xyz;

        ray.origin.xyz = (inv_t * vec4(ray.origin.xyz, 1.0)).xyz;
        ray.direction.xyz = (inv_t * vec4(ray.direction.xyz, 0.0)).xyz;

        if (IntersectSphere(ray, bounds) == false) {
            continue;
        }
        // resultColor.g += 0.1;

        for (uint idx = 0; idx < draw.index_count; idx+=3) {
            RayHit hit = best_hit;// CreateRayHit();

            vec3 v0 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 0]].p;
            vec3 v1 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 2]].p;
            vec3 v2 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 1]].p;

            vec3 n0 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 0]].n;
            vec3 n1 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 2]].n;
            vec3 n2 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 1]].n;

            vec2 t0 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 0]].t;
            vec2 t1 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 2]].t;
            vec2 t2 = vertices[draw.vertex_offset + indices[draw.first_index + idx + 1]].t;
            
            BVHPrimative primative;
            primative.primative = draw.first_index + idx;

            primative.x0 = v0.x;
            primative.y0 = v0.y;
            primative.z0 = v0.z;

            primative.x1 = v1.x;
            primative.y1 = v1.y;
            primative.z1 = v1.z;

            primative.x2 = v2.x;
            primative.y2 = v2.y;
            primative.z2 = v2.z;

            if (IntersectTriangle(ray, hit, primative, rng)) {
                // resultColor.b = hit.dist / 1000.0;
                // resultColor.r = float(i) / 10.0;
                ray.tmax = hit.dist;

                vec3 hn = normalize(blend_attrib(n0, n1, n2, hit.bary));
                vec2 ht = blend_attrib(t0, t1, t2, hit.bary);

                vec3 albedo = texture(uSampler[albedo_id], ht).rgb;

                float kD = max(0.4, saturate(dot(hn, L)));

                bounce.origin = ray.origin + ray.direction * hit.dist + hn * 0.01;
                bounce.direction = normalize(reflect(ray.direction, hn));
                bounce.tmin = 0.01;
                bounce.tmax = RAY_MAX;
                best_hit = hit;
                // resultColor.rgb = hn;
                resultColor.rgb = albedo * kD;
            }
        }
    }
    return resultColor;
}

void main() {
    ivec2 dim = imageSize(fOutput);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);


    vec3 L = uEnvironment.sun.direction.xyz;
    vec4 resultColor = vec4(0.0);
    vec3 sun = L;
    // resultColor.b = 1.0;

    Ray bounce;
    Ray ray = CameraRay(
        PushConstants.uInvV,
        PushConstants.uCamPos.xyz,
        uv * 2.0 - 1.0
    );
    resultColor.rgb = sky_color(ray.direction, sun);
    
    RayHit best_hit = CreateRayHit();

    vec3 direct = trace_scene(ray, best_hit, bounce);

    if (best_hit.dist < RAY_MAX) {
        Ray bounce2;
        Ray light_bounce = bounce;
        best_hit = CreateRayHit();
        // bounce.direction = L;
        direct += trace_scene(bounce, best_hit, bounce2) * 0.5;
        // light_bounce.direction = L;
        // light_bounce.direction = mix(light_bounce.direction, hemisphere_random(light_bounce.direction, Sporadic.uTime * dot(uv,uv)), 0.01);
        // best_hit = CreateRayHit();
        
        // trace_scene(light_bounce, best_hit, bounce2);
        // direct *= //vec3(1.0) - 
        // (best_hit.dist < RAY_MAX ? 0.0 : 1.0);
        resultColor.rgb = direct;
        // resultColor.rgb = min(resultColor.rgb, direct);
        // resultColor.rgb = max(resultColor.rgb, direct);
    }

    
    
    // resultColor.rgb = pow(resultColor.rgb, vec3(2.2));
    
    // resultColor.rg = vec2(1,0);
    // resultColor.rg = uv;
    resultColor.a = 1;

    imageStore(fOutput, texelCoord, resultColor);
}