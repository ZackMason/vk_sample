#version 460
#extension GL_EXT_scalar_block_layout : enable


#include "tonemap.glsl"

layout(push_constant, scalar) uniform constants
{
	float kFilterRadius;
    int kMipLevel;
};

layout(binding = 0, set = 0, rgba16f) uniform image2D uTextures[2];

#define uRead uTextures[0]
#define uWrite uTextures[1]

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() {
    float texel_size = 1.0/imageSize(uRead,0).xy;
    float x = texel_size.x;
    float y = texel_size.y;

    vec2 uv = gl_GlobalInvocationID.xy;

    vec3 a = imageLoad(uRead, vec2(uv.x - 2*x, uv.y + 2*y)).rgb;
    vec3 b = imageLoad(uRead, vec2(uv.x, uv.y + 2*y)).rgb;
    vec3 c = imageLoad(uRead, vec2(uv.x + 2*x, uv.y + 2*y)).rgb;

    vec3 d = imageLoad(uRead, vec2(uv.x - 2*x, uv.y)).rgb;
    vec3 e = imageLoad(uRead, vec2(uv.x, uv.y)).rgb;
    vec3 f = imageLoad(uRead, vec2(uv.x + 2*x, uv.y)).rgb;
    
    vec3 g = imageLoad(uRead, vec2(uv.x - 2*x, uv.y - 2*y)).rgb;
    vec3 h = imageLoad(uRead, vec2(uv.x, uv.y - 2*y)).rgb;
    vec3 i = imageLoad(uRead, vec2(uv.x + 2*x, uv.y - 2*y)).rgb;
    
    vec3 j = imageLoad(uRead, vec2(uv.x - x, uv.y + y)).rgb;
    vec3 k = imageLoad(uRead, vec2(uv.x + x, uv.y + y)).rgb;
    vec3 l = imageLoad(uRead, vec2(uv.x - x, uv.y - y)).rgb;
    vec3 m = imageLoad(uRead, vec2(uv.x + x, uv.y - y)).rgb;

    vec3 color=vec3(0.0);
    vec3 w[5];
    switch(kMipLevel){
        case 0: {
            w[0] = (a+b+d+e) * (0.125/4.0);
            w[1] = (b+c+e+f) * (0.125/4.0);
            w[2] = (d+e+g+h) * (0.125/4.0);
            w[3] = (e+f+h+i) * (0.125/4.0);
            w[4] = (j+k+l+m) * (0.5/4.0);
            w[0] *= karis_average(w[0]);
            w[1] *= karis_average(w[1]);
            w[2] *= karis_average(w[2]);
            w[3] *= karis_average(w[3]);
            w[4] *= karis_average(w[4]);
            color = w[0]+w[1]+w[2]+w[3]+w[4];
        }   break;
        default: {
            color = e*0.125;
            color += (a+c+g+i)*0.03125;
            color += (b+d+f+h)*0.0625;
            color += (j+k+l+m)*0.125;
        }   break;
    }
    color = max(color, vec3(0.0001));
    imageStore(uWrite, uv, vec4(color,1.0));
}